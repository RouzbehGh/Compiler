
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocEMPTYnonassocIFFnonassocELIFnonassocELSEnonassocRELOPnonassocOPleftCOMMArightASSIGNleftORleftANDleftEQNEleftGTLTGELEleftSUMSUBleftMULDIVMODrightNOTrightUMINUSAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE VOID WHILEprogram : declist MAIN LRB RRB blockdeclist : dec\n                   | declist dec\n                   | emptydec : vardec\n               | funcdectype : INTEGER\n                | FLOAT\n                | BOOLEANiddec : ID\n                 | ID LSB exp RSB\n                 | ID ASSIGN expidlist : iddec\n               | idlist COMMA iddecvardec : type idlist SEMICOLONfuncdec : type ID LRB paramdecs RRB block\n                   | VOID ID LRB paramdecs RRB blockparamdecs : paramdecslist\n                     | emptyparamdecslist : paramdec\n                         | paramdecslist COMMA paramdecparamdec : type ID\n                    | type ID LSB RSBvarlist : vardec\n                   | varlist vardec\n                   | emptyblock : LCB varlist stmtlist RCBstmtlist : stmt\n                    | stmtlist stmt\n                    | emptylvalue : ID\n                  | ID LSB exp RSBstmt : matched_stmt\n                | unmatched_stmtmatched_stmt : IF LRB exp RRB matched_stmt elseiflist ELSE matched_stmt %prec IFF\n                        | othersunmatched_stmt : IF LRB exp RRB matched_stmt elseiflist %prec IFF\n                          | IF LRB exp RRB matched_stmt elseiflist ELSE unmatched_stmt %prec IFFothers : RETURN exp SEMICOLON\n                  | exp SEMICOLON\n                  | block\n                  | WHILE LRB exp RRB stmt\n                  | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n                  | PRINT LRB ID RRB SEMICOLONelseiflist : ELIF LRB exp RRB stmt\n                      | elseiflist ELIF LRB exp RRB stmt\n                      | emptyexp : lvalue ASSIGN exp\n               | exp operator exp %prec OP\n               | exp relop exp %prec RELOP\n               | const\n               | lvalue\n               | ID LRB explist RRB\n               | LRB exp RRB\n               | ID LRB RRB\n               | SUB exp %prec UMINUS\n               | NOT expoperator : OR\n                    | AND\n                    | SUM\n                    | SUB\n                    | MUL\n                    | DIV\n                    | MODconst : INTEGERNUMBER\n                 | FLOATNUMBER\n                 | TRUE\n                 | FALSErelop : GT\n                 | LT\n                 | NE\n                 | EQ\n                 | LE\n                 | GEexplist : exp\n                   | explist COMMA expempty : %prec EMPTY'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,13,19,79,89,108,],[-77,12,-2,-4,-5,-6,-3,-15,-16,-17,-27,]),'VOID':([0,2,3,4,5,6,13,19,79,89,108,],[-77,8,-2,-4,-5,-6,-3,-15,-16,-17,-27,]),'INTEGER':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,9,-2,-4,-5,-6,-3,-15,9,9,-77,9,9,-24,-26,-16,-17,-25,-27,]),'FLOAT':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,10,-2,-4,-5,-6,-3,-15,10,10,-77,10,10,-24,-26,-16,-17,-25,-27,]),'BOOLEAN':([0,2,3,4,5,6,13,19,21,24,47,50,74,75,76,79,89,91,108,],[-77,11,-2,-4,-5,-6,-3,-15,11,11,-77,11,11,-24,-26,-16,-17,-25,-27,]),'$end':([1,46,108,],[0,-1,-27,]),'ID':([7,8,9,10,11,19,20,22,23,28,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,115,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[15,17,-7,-8,-9,-15,27,33,33,48,33,33,33,-77,33,33,33,33,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,33,-77,-24,-26,27,33,-25,-28,-30,-33,-34,-36,33,-41,33,-27,-29,33,-40,33,33,121,-39,33,33,33,-77,-42,-44,33,-37,-47,33,33,33,33,-35,-38,33,33,33,-43,33,-45,33,-46,]),'LRB':([12,15,17,19,22,23,33,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,96,98,99,100,101,102,103,106,108,109,110,111,113,114,118,122,123,124,126,127,128,130,131,132,133,134,135,137,138,139,141,142,143,144,146,149,150,152,153,154,155,],[18,21,24,-15,37,37,51,37,37,37,-77,37,37,37,37,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,37,-77,-24,-26,37,-25,-28,-30,-33,-34,110,-36,37,-41,113,114,115,37,-27,-29,37,-40,37,37,-39,37,37,37,131,-77,-42,-44,37,-37,139,-47,37,37,144,37,37,-35,-38,37,37,37,-43,37,-45,37,-46,]),'SEMICOLON':([14,15,16,26,27,33,35,36,40,41,42,43,44,53,71,72,82,85,86,87,88,97,105,107,112,120,125,129,],[19,-10,-13,-14,-10,-31,-52,-51,-65,-66,-67,-68,-12,-11,-56,-57,-55,-49,-50,-48,-54,111,-53,-32,118,124,130,135,]),'COMMA':([14,15,16,26,27,30,32,33,35,36,40,41,42,43,44,48,53,71,72,80,81,82,83,85,86,87,88,104,105,107,116,],[20,-10,-13,-14,-10,50,-20,-31,-52,-51,-65,-66,-67,-68,-12,-22,-11,-56,-57,-21,106,-55,-75,-49,-50,-48,-54,-23,-53,-32,-76,]),'LSB':([15,27,33,48,],[22,22,52,78,]),'ASSIGN':([15,27,33,35,107,],[23,23,-31,69,-32,]),'RRB':([18,21,24,29,30,31,32,33,35,36,40,41,42,43,45,48,51,70,71,72,80,81,82,83,85,86,87,88,104,105,107,116,117,119,121,136,140,145,148,],[25,-77,-77,49,-18,-19,-20,-31,-52,-51,-65,-66,-67,-68,73,-22,82,88,-56,-57,-21,105,-55,-75,-49,-50,-48,-54,-23,-53,-32,-76,122,123,125,141,146,149,152,]),'IF':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,96,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,126,96,-77,-42,-44,-37,-47,96,126,-35,-38,96,96,-43,96,-45,126,-46,]),'RETURN':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,99,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,99,99,-77,-42,-44,-37,-47,99,99,-35,-38,99,99,-43,99,-45,99,-46,]),'WHILE':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,101,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,101,101,-77,-42,-44,-37,-47,101,101,-35,-38,101,101,-43,101,-45,101,-46,]),'FOR':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,102,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,102,102,-77,-42,-44,-37,-47,102,102,-35,-38,102,102,-43,102,-45,102,-46,]),'PRINT':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,-77,-77,-24,-26,103,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,103,103,-77,-42,-44,-37,-47,103,103,-35,-38,103,103,-43,103,-45,103,-46,]),'SUB':([19,22,23,33,34,35,36,37,38,39,40,41,42,43,44,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,82,83,84,85,86,87,88,90,91,92,93,94,95,97,98,99,100,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,122,123,124,127,128,129,130,131,132,134,135,136,137,139,140,141,142,143,144,145,146,148,149,150,152,153,154,155,],[-15,38,38,-31,59,-52,-51,38,38,38,-65,-66,-67,-68,59,-77,38,38,38,38,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,38,59,-56,-57,38,-24,-26,-55,59,59,59,59,59,-54,38,-25,-28,-30,-33,-34,59,-36,38,-41,-53,38,-32,-27,-29,38,-40,59,38,38,59,59,-39,59,59,38,38,38,-77,-42,59,-44,38,-37,-47,38,59,38,38,59,38,-35,-38,38,59,38,59,38,-43,38,-45,38,-46,]),'NOT':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,39,39,39,39,39,-77,39,39,39,39,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,39,39,-24,-26,39,-25,-28,-30,-33,-34,-36,39,-41,39,-27,-29,39,-40,39,39,-39,39,39,39,-77,-42,-44,39,-37,-47,39,39,39,39,-35,-38,39,39,39,-43,39,-45,39,-46,]),'LCB':([19,25,47,49,73,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,122,123,127,128,130,132,134,137,141,142,143,146,149,150,152,153,154,155,],[-15,47,-77,47,47,-77,-24,-26,47,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,47,47,-77,-42,-44,-37,-47,47,47,-35,-38,47,47,-43,47,-45,47,-46,]),'INTEGERNUMBER':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,40,40,40,40,40,-77,40,40,40,40,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,40,-77,-24,-26,40,-25,-28,-30,-33,-34,-36,40,-41,40,-27,-29,40,-40,40,40,-39,40,40,40,-77,-42,-44,40,-37,-47,40,40,40,40,-35,-38,40,40,40,-43,40,-45,40,-46,]),'FLOATNUMBER':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,41,41,41,41,41,-77,41,41,41,41,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,41,-77,-24,-26,41,-25,-28,-30,-33,-34,-36,41,-41,41,-27,-29,41,-40,41,41,-39,41,41,41,-77,-42,-44,41,-37,-47,41,41,41,41,-35,-38,41,41,41,-43,41,-45,41,-46,]),'TRUE':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,42,42,42,42,42,-77,42,42,42,42,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,42,-77,-24,-26,42,-25,-28,-30,-33,-34,-36,42,-41,42,-27,-29,42,-40,42,42,-39,42,42,42,-77,-42,-44,42,-37,-47,42,42,42,42,-35,-38,42,42,42,-43,42,-45,42,-46,]),'FALSE':([19,22,23,37,38,39,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,90,91,92,93,94,95,98,99,100,106,108,109,110,111,113,114,118,122,123,124,127,128,130,131,132,134,135,137,139,141,142,143,144,146,149,150,152,153,154,155,],[-15,43,43,43,43,43,-77,43,43,43,43,-58,-59,-60,-61,-62,-63,-64,-69,-70,-71,-72,-73,-74,43,-77,-24,-26,43,-25,-28,-30,-33,-34,-36,43,-41,43,-27,-29,43,-40,43,43,-39,43,43,43,-77,-42,-44,43,-37,-47,43,43,43,43,-35,-38,43,43,43,-43,43,-45,43,-46,]),'RCB':([19,47,74,75,76,90,91,92,93,94,95,98,100,108,109,111,118,127,128,130,132,134,142,143,150,153,155,],[-15,-77,-77,-24,-26,108,-25,-28,-30,-33,-34,-36,-41,-27,-29,-40,-39,-77,-42,-44,-37,-47,-35,-38,-43,-45,-46,]),'RSB':([33,34,35,36,40,41,42,43,71,72,78,82,84,85,86,87,88,105,107,],[-31,53,-52,-51,-65,-66,-67,-68,-56,-57,104,-55,107,-49,-50,-48,-54,-53,-32,]),'OR':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,56,-52,-51,-65,-66,-67,-68,56,56,-56,-57,-55,56,56,56,56,56,-54,56,-53,-32,56,56,56,56,56,56,56,56,56,56,]),'AND':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,57,-52,-51,-65,-66,-67,-68,57,57,-56,-57,-55,57,57,57,57,57,-54,57,-53,-32,57,57,57,57,57,57,57,57,57,57,]),'SUM':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,58,-52,-51,-65,-66,-67,-68,58,58,-56,-57,-55,58,58,58,58,58,-54,58,-53,-32,58,58,58,58,58,58,58,58,58,58,]),'MUL':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,60,-52,-51,-65,-66,-67,-68,60,60,-56,-57,-55,60,60,60,60,60,-54,60,-53,-32,60,60,60,60,60,60,60,60,60,60,]),'DIV':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,61,-52,-51,-65,-66,-67,-68,61,61,-56,-57,-55,61,61,61,61,61,-54,61,-53,-32,61,61,61,61,61,61,61,61,61,61,]),'MOD':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,62,-52,-51,-65,-66,-67,-68,62,62,-56,-57,-55,62,62,62,62,62,-54,62,-53,-32,62,62,62,62,62,62,62,62,62,62,]),'GT':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,63,-52,-51,-65,-66,-67,-68,63,63,-56,-57,-55,63,63,63,63,63,-54,63,-53,-32,63,63,63,63,63,63,63,63,63,63,]),'LT':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,64,-52,-51,-65,-66,-67,-68,64,64,-56,-57,-55,64,64,64,64,64,-54,64,-53,-32,64,64,64,64,64,64,64,64,64,64,]),'NE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,65,-52,-51,-65,-66,-67,-68,65,65,-56,-57,-55,65,65,65,65,65,-54,65,-53,-32,65,65,65,65,65,65,65,65,65,65,]),'EQ':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,66,-52,-51,-65,-66,-67,-68,66,66,-56,-57,-55,66,66,66,66,66,-54,66,-53,-32,66,66,66,66,66,66,66,66,66,66,]),'LE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,67,-52,-51,-65,-66,-67,-68,67,67,-56,-57,-55,67,67,67,67,67,-54,67,-53,-32,67,67,67,67,67,67,67,67,67,67,]),'GE':([33,34,35,36,40,41,42,43,44,70,71,72,82,83,84,85,86,87,88,97,105,107,112,116,117,119,120,129,136,140,145,148,],[-31,68,-52,-51,-65,-66,-67,-68,68,68,-56,-57,-55,68,68,68,68,68,-54,68,-53,-32,68,68,68,68,68,68,68,68,68,68,]),'ELIF':([94,95,98,100,108,111,118,127,128,130,132,134,142,143,147,150,151,153,155,],[-33,-34,-36,-41,-27,-40,-39,133,-42,-44,138,-47,-35,-38,133,-43,138,-45,-46,]),'ELSE':([94,95,98,100,108,111,118,127,128,130,132,134,142,143,147,150,151,153,155,],[-33,-34,-36,-41,-27,-40,-39,-77,-42,-44,137,-47,-35,-38,-77,-43,154,-45,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[3,13,]),'empty':([0,21,24,47,74,127,147,],[4,31,31,76,93,134,134,]),'vardec':([0,2,47,74,],[5,5,75,91,]),'funcdec':([0,2,],[6,6,]),'type':([0,2,21,24,47,50,74,],[7,7,28,28,77,28,77,]),'idlist':([7,77,],[14,14,]),'iddec':([7,20,77,],[16,26,16,]),'paramdecs':([21,24,],[29,45,]),'paramdecslist':([21,24,],[30,30,]),'paramdec':([21,24,50,],[32,32,80,]),'exp':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[34,44,70,71,72,83,84,85,86,87,97,97,112,116,117,119,120,97,97,129,136,140,97,145,97,148,97,97,97,97,]),'lvalue':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'const':([22,23,37,38,39,51,52,54,55,69,74,90,99,106,110,113,114,122,123,124,131,135,137,139,141,144,146,149,152,154,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'block':([25,49,73,74,90,122,123,137,141,146,149,152,154,],[46,79,89,100,100,100,100,100,100,100,100,100,100,]),'operator':([34,44,70,71,72,83,84,85,86,87,97,112,116,117,119,120,129,136,140,145,148,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'relop':([34,44,70,71,72,83,84,85,86,87,97,112,116,117,119,120,129,136,140,145,148,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'varlist':([47,],[74,]),'explist':([51,],[81,]),'stmtlist':([74,],[90,]),'stmt':([74,90,123,146,149,152,],[92,109,128,150,153,155,]),'matched_stmt':([74,90,122,123,137,141,146,149,152,154,],[94,94,127,94,142,147,94,94,94,142,]),'unmatched_stmt':([74,90,123,137,146,149,152,],[95,95,95,143,95,95,95,]),'others':([74,90,122,123,137,141,146,149,152,154,],[98,98,98,98,98,98,98,98,98,98,]),'elseiflist':([127,147,],[132,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','Yacc.py',12),
  ('declist -> dec','declist',1,'p_declist','Yacc.py',16),
  ('declist -> declist dec','declist',2,'p_declist','Yacc.py',17),
  ('declist -> empty','declist',1,'p_declist','Yacc.py',18),
  ('dec -> vardec','dec',1,'p_dec','Yacc.py',22),
  ('dec -> funcdec','dec',1,'p_dec','Yacc.py',23),
  ('type -> INTEGER','type',1,'p_type','Yacc.py',27),
  ('type -> FLOAT','type',1,'p_type','Yacc.py',28),
  ('type -> BOOLEAN','type',1,'p_type','Yacc.py',29),
  ('iddec -> ID','iddec',1,'p_iddec','Yacc.py',33),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec','Yacc.py',34),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec','Yacc.py',35),
  ('idlist -> iddec','idlist',1,'p_idlist','Yacc.py',39),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','Yacc.py',40),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','Yacc.py',44),
  ('funcdec -> type ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','Yacc.py',48),
  ('funcdec -> VOID ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','Yacc.py',49),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','Yacc.py',53),
  ('paramdecs -> empty','paramdecs',1,'p_paramdecs','Yacc.py',54),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','Yacc.py',58),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','Yacc.py',59),
  ('paramdec -> type ID','paramdec',2,'p_paramdec','Yacc.py',63),
  ('paramdec -> type ID LSB RSB','paramdec',4,'p_paramdec','Yacc.py',64),
  ('varlist -> vardec','varlist',1,'p_varlist','Yacc.py',68),
  ('varlist -> varlist vardec','varlist',2,'p_varlist','Yacc.py',69),
  ('varlist -> empty','varlist',1,'p_varlist','Yacc.py',70),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','Yacc.py',74),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist','Yacc.py',78),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','Yacc.py',79),
  ('stmtlist -> empty','stmtlist',1,'p_stmtlist','Yacc.py',80),
  ('lvalue -> ID','lvalue',1,'p_lvalue','Yacc.py',84),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','Yacc.py',85),
  ('stmt -> matched_stmt','stmt',1,'p_stmt','Yacc.py',89),
  ('stmt -> unmatched_stmt','stmt',1,'p_stmt','Yacc.py',90),
  ('matched_stmt -> IF LRB exp RRB matched_stmt elseiflist ELSE matched_stmt','matched_stmt',8,'p_stmt_matched','Yacc.py',94),
  ('matched_stmt -> others','matched_stmt',1,'p_stmt_matched','Yacc.py',95),
  ('unmatched_stmt -> IF LRB exp RRB matched_stmt elseiflist','unmatched_stmt',6,'p_stmt_unmatched','Yacc.py',99),
  ('unmatched_stmt -> IF LRB exp RRB matched_stmt elseiflist ELSE unmatched_stmt','unmatched_stmt',8,'p_stmt_unmatched','Yacc.py',100),
  ('others -> RETURN exp SEMICOLON','others',3,'p_stmt_others','Yacc.py',105),
  ('others -> exp SEMICOLON','others',2,'p_stmt_others','Yacc.py',106),
  ('others -> block','others',1,'p_stmt_others','Yacc.py',107),
  ('others -> WHILE LRB exp RRB stmt','others',5,'p_stmt_others','Yacc.py',108),
  ('others -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','others',9,'p_stmt_others','Yacc.py',109),
  ('others -> PRINT LRB ID RRB SEMICOLON','others',5,'p_stmt_others','Yacc.py',110),
  ('elseiflist -> ELIF LRB exp RRB stmt','elseiflist',5,'p_elseiflist','Yacc.py',115),
  ('elseiflist -> elseiflist ELIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','Yacc.py',116),
  ('elseiflist -> empty','elseiflist',1,'p_elseiflist','Yacc.py',117),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp','Yacc.py',121),
  ('exp -> exp operator exp','exp',3,'p_exp','Yacc.py',122),
  ('exp -> exp relop exp','exp',3,'p_exp','Yacc.py',123),
  ('exp -> const','exp',1,'p_exp','Yacc.py',124),
  ('exp -> lvalue','exp',1,'p_exp','Yacc.py',125),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','Yacc.py',126),
  ('exp -> LRB exp RRB','exp',3,'p_exp','Yacc.py',127),
  ('exp -> ID LRB RRB','exp',3,'p_exp','Yacc.py',128),
  ('exp -> SUB exp','exp',2,'p_exp','Yacc.py',129),
  ('exp -> NOT exp','exp',2,'p_exp','Yacc.py',130),
  ('operator -> OR','operator',1,'p_operator','Yacc.py',135),
  ('operator -> AND','operator',1,'p_operator','Yacc.py',136),
  ('operator -> SUM','operator',1,'p_operator','Yacc.py',137),
  ('operator -> SUB','operator',1,'p_operator','Yacc.py',138),
  ('operator -> MUL','operator',1,'p_operator','Yacc.py',139),
  ('operator -> DIV','operator',1,'p_operator','Yacc.py',140),
  ('operator -> MOD','operator',1,'p_operator','Yacc.py',141),
  ('const -> INTEGERNUMBER','const',1,'p_const','Yacc.py',145),
  ('const -> FLOATNUMBER','const',1,'p_const','Yacc.py',146),
  ('const -> TRUE','const',1,'p_const','Yacc.py',147),
  ('const -> FALSE','const',1,'p_const','Yacc.py',148),
  ('relop -> GT','relop',1,'p_relop','Yacc.py',152),
  ('relop -> LT','relop',1,'p_relop','Yacc.py',153),
  ('relop -> NE','relop',1,'p_relop','Yacc.py',154),
  ('relop -> EQ','relop',1,'p_relop','Yacc.py',155),
  ('relop -> LE','relop',1,'p_relop','Yacc.py',156),
  ('relop -> GE','relop',1,'p_relop','Yacc.py',157),
  ('explist -> exp','explist',1,'p_explist','Yacc.py',161),
  ('explist -> explist COMMA exp','explist',3,'p_explist','Yacc.py',162),
  ('empty -> <empty>','empty',0,'p_empty','Yacc.py',166),
]
